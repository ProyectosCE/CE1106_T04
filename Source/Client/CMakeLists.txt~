cmake_minimum_required(VERSION 3.27)
project(Client)

set(CMAKE_CXX_STANDARD 23)
set(CMAKE_C_STANDARD 23)

#FIND PACKEGES HERE:
find_package(cJSON)
find_package(raylib)
find_package(log.c)
find_package(inih)

#Executables here:
add_executable(Client
        game/spectator.c
        game/spectator.h
        comunicaciones/comServer.c
        comunicaciones/comServer.h
        comunicaciones/socketServer.c
        comunicaciones/socketServer.h
        comunicaciones/jsonProcessor.c
        comunicaciones/jsonProcessor.h
        main.c
        configuracion/configuracion.c
        configuracion/configuracion.h
        logs/saveLog.c
        logs/saveLog.h
        game/game_server.c
        game/game_server.h
        game/game_logic.c
        game/game_logic.h
        game/game_screen.c
        game/game_screen.h
        game/Objects/player.c
        game/Objects/player.h
        game/Objects/ball.c
        game/Objects/ball.h
        game/Objects/brick.c
        game/Objects/brick.h
        gui/camera.c
        gui/camera.h
        gui/main_menu.c
        gui/main_menu.h
        game_status.c
        game_status.h
        game/collision_handler.c
        game/collision_handler.h
        game/powerHandler.c
        game/powerHandler.h
        gui/nameInput.c
        gui/nameInput.h

)


# Copiar el archivo settings.ini al directorio de salida
file(COPY ${CMAKE_SOURCE_DIR}/settings.ini DESTINATION ${CMAKE_BINARY_DIR})

# Crear la carpeta logs en tiempo de compilaci√≥n
add_custom_command(
        TARGET Client POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E make_directory $<TARGET_FILE_DIR:Client>/logs
)

#Targets here:
target_link_libraries(Client cjson::cjson raylib)
target_link_libraries(Client raylib)
target_link_libraries(Client log.c::log.c)
target_link_libraries(Client inih::inih)
